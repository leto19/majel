#!/usr/bin/env python3
import sys
import os
import subprocess
import speech_recognition as sr
import pyaudio
from contextlib import contextmanager
import time
import re
import random
from ctypes import *
from datetime import datetime
import getpass
import socket
import shlex
recog = sr.Recognizer()  # this is the object that recognises the speech
ERROR_HANDLER_FUNC = CFUNCTYPE(None, c_char_p, c_int, c_char_p, c_int, c_char_p)
def py_error_handler(filename, line, function, err, fmt):
  pass
c_error_handler = ERROR_HANDLER_FUNC(py_error_handler)

asound = cdll.LoadLibrary('libasound.so')
# Set error handler
asound.snd_lib_error_set_handler(c_error_handler)
# Initialize PyAudio
p = pyaudio.PyAudio()
p.terminate()

def get_command(lang,gram):
    if len(sys.argv) == 2: #use audio file
        audio_file = sr.AudioFile(sys.argv[1])
        with audio_file as source:
            audio = recog.record(source)
    else: #use mic 
        mic = sr.Microphone(chunk_size=1024, sample_rate=44100)
        with mic as source:
            #recog.adjust_for_ambient_noise(source)
            #time.sleep(0.5)
            print("listening...")

            audio = recog.listen(source,phrase_time_limit=5)
    #print("done!")    

    try:
        print("working...")
        out = recog.recognize_sphinx(audio,language=lang,grammar=gram)
        #show_possible(out)
    except sr.UnknownValueError:
        out2 = recog.recognize_sphinx(audio,language=lang)

        print("didn't quite get that")
        out = ""
    #return out.hyp().hypstr.lower().split()
    return out.lower().split()
 
def show_possible(decoder):
    #print("Best 10 hypothesis:")
    for best, i in zip(decoder.nbest(),range(10)):
        print(best.hypstr,best.score)
        
def run_command(command):
    """
        takes a command as a list of strings and exercutes it
    """
    if "exit" in command:
        print("Goodbye!")
        time.sleep(0.5)
        os.system('clear')
        exit()
    if command[0] == "cd":
        try:
            if len(command) is 1:
                os.chdir("/home/%s/"% getpass.getuser())
            else:
                if command[1] == ".":
                    os.chdir(os.getcwd())
                elif command[1] == "..":
                    os.chdir(os.pardir)
                else:
                    os.chdir(command[1])
        except FileNotFoundError:
            print("no such directory: %s"   %(command[1]))

        os.listdir()
    else:
        try:
            process = subprocess.run(command)
        except FileNotFoundError:
            print("Invalid Command: %s"%" ".join(command))

def replace_in_list(phrase,to_replace,replaced):
    phrase = [s.replace(to_replace,replaced) for s in phrase]
    return phrase

def word_to_character(phrase):
    """
    converts spoken input string to exercutable command
    """
    phrase = replace_in_list(phrase,"dash","-")
    phrase = replace_in_list(phrase,"slash","/")
    phrase = replace_in_list(phrase,"dot",".")

    #phrase = phrase.replace("dash","-")
    #phrase = phrase.replace("dot",".")
    #phrase = phrase.replace("slash","/")
    
  
    for n,i in enumerate(phrase):
        #print(n,i)
        if i == "-":
            phrase[n+1] = "-" + phrase[n+1]
            phrase.pop(n)
        if i == "/" and n < len(phrase)-1:
            #print("phrase[n+1] is ",phrase[n+1])
            phrase[n+1] =  "/" + phrase[n+1] 
            phrase.pop(n)
    prev_word = "test"
    #print("\n-------")
    #print(phrase)
    count = 0
    while count < len(phrase):
        for index,word in enumerate(phrase):
            #print("word is ", word, "at index", index)
            #print("prev_word is", prev_word)
            if prev_word[0]== "/" and word[0] == "/":
                new_word = prev_word + word
                print("new word is ",new_word)
                phrase[index] = new_word
                phrase.pop(prev_index)
                prev_word = new_word
            else:
                prev_word = word
                prev_index = index  
        #print(phrase)
        count+= 1
    phrase = [s.replace("root","/") for s in phrase]
    phrase = [s.replace("~","/home/g") for s in phrase]
    return phrase
    
def update_log(phrase):
    """
    updates the log file with the most recent command.
    """
    with open('/home/g/year3/majel/majel_log.txt','a') as f:
        f.write(phrase+"\n")


def more_than_one_ending_slash(phrase):
    flag = 0
    for words in phrase:
        if words[0] is "/":
            flag +=1
    if flag > 1:
        return True
    else:
        return False





if __name__ == "__main__":
    l = ("/home/g/year3/majel/languages/acoustic-model","/home/g/year3/majel/languages/cmd1/cmd1.lm","/home/g/year3/majel/languages/cmd2/cmd2.dict")
    gram = "/home/g/year3/majel/grammars/command.jsgf"
    command_words = str()
    """
    command_words = ["ls","dash", "a","slash","home","slash","g","slash","Downloads"]
    #print("You said:\n%s" % command_words)  
    command_words = word_to_character(command_words)
    #print("running command:\n%s" % command_words)
    run_command(command_words)
    """
    os.system('clear')
    username = getpass.getuser()
    hostname = socket.gethostname()
    boot_quotes = [
        "I talk to the wind,my words are all carried away ",
        "Is there anybody out there?",
        "The universe is a spheroid region, 705 meters in diameter.",
        "There are problems in this universe for which there are no answers. Nothing. Nothing can be done.",
        "Show me a completely smooth operation and I'll show you someone who's covering mistakes. Real boats rock.",
        "Ultimately all things are known because you want to believe you know.",
        "There's no secret to balance. You just have to feel the waves.",
        "It is difficult to live in the present, pointless to live in the future and impossible to live in the past."
        ]

    print("Welcome to Majel!\n" + "\x1b[3;39;40m" + random.choice(boot_quotes) + "\x1b[0m")
    
    while "exit" not in command_words:
        current_time = "╭─\x1b[1;31;42m[" + datetime.now().strftime("%H:%M:%S") + "]\x1b[0m"
        path =  "\x1b[3;32;40m" + username + "@" +hostname + " in \x1b[0m" +"\x1b[4;32;40m" + os.getcwd() +  "\x1b[0m"  
        path = path.replace("/home/g","~")
        
        prompt =  "%s|%s\n╰─‣‣ " % (current_time,path)
        input_string= input(prompt)
        command_words = shlex.split(input_string)
        if command_words == []:# use voice
            command_words  = get_command(l,gram);
            print("You said:\n%s" % command_words)  
        command_words = word_to_character(command_words)
        update_log(" ".join(command_words))
        if len(command_words) != 0: # if some words were returned 
            run_command(command_words)
        else:
            print("I'm sorry %s, I'm afraid I can't do that." % username.capitalize())
    
    print("Goodbye!")
    time.sleep(1)
    os.system('clear')
    