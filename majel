#!/usr/bin/env python3
from contextlib import contextmanager
import getpass
import os
import random
import shlex
import signal
import socket
import subprocess
import sys
import time
import textwrap
from ctypes import CFUNCTYPE,c_char_p,c_int,cdll
from datetime import datetime
import sphinxbase as sb
import pyaudio
import speech_recognition as sr
import scripts.setup as setup


def test_recognition():
    recog = sr.Recognizer()
    lang = ("/home/g/year3/majel/languages/acoustic-model",
            "/home/g/year3/majel/languages/cmd1.lm", "/home/g/year3/majel/languages/cmd2/master.dict")
    gram = "/home/g/year3/majel/grammars/command.gram"
    audio_file = sr.AudioFile("/home/g/year3/majel/sounds/ls.wav")
    with audio_file as source:
        test_sound = recog.record(source)
        recog.recognize_sphinx(test_sound, language=lang, grammar=gram)
    print("done!")
    #print("testing ...\n %s" % out)
    os.system('clear')


def get_command(lang, gram, selective_mode=False):
    recog = sr.Recognizer()  # this is the object that recognises the speech
    
    
    mic = sr.Microphone(chunk_size=1024, sample_rate=44100)
    with mic as source:
        #recog.adjust_for_ambient_noise(source)
        #time.sleep(0.5)
        print("listening...")
        with suppress_stderr():
            audio = recog.listen(source,phrase_time_limit=timeout)
        #print("done!")
        
    try:
        print("working...")
        with suppress_stderr():
            if selective_mode:
                out2 = recog.recognize_sphinx(audio,language=lang,show_all=True)
                out = show_possible(out2)

            else:
                out = recog.recognize_sphinx(audio,language=lang,grammar=gram)
        #os.system('clear')

#show_possible(out)
    except sr.UnknownValueError:
        #out2 = recog.recognize_sphinx(audio,language=lang,show_all=True)
        print("didn't quite get that")
        out = ""
    #return out.hyp().hypstr.lower().split()
    return out.lower().split()

def show_possible(decoder):
    hyp_list = list()
    #print("Best 10 hypothesis:")
    for best, i in zip(decoder.nbest(),range(10)):
        print(i,best.hypstr)
        hyp_list.append(best.hypstr)
    selected = input("select the number of the command you want: ")
    return hyp_list[int(selected)]

def change_directory(command):
    try:
        if len(command) is 1:
            os.chdir("/home/%s/"% getpass.getuser())
            if is_connected("google.com") and os.path.exists("/home/g/year3/majel/grammars/command.fsg"):
                setup.update_folder_grammar_dictionary("/home/%s/"% getpass.getuser())
                setup.update_file_grammar_dictionary("/home/%s/" % getpass.getuser())
                test_recognition()
        else:
            #print("path is """.join(command[1:]))
            if is_connected("google.com") and os.path.exists("/home/g/year3/majel/grammars/command.fsg"):
                setup.update_folder_grammar_dictionary("".join(command[1:]))
                setup.update_file_grammar_dictionary("".join(command[1:]))
                test_recognition()
            else:
                
                print("Not connected - new names will not be updated.")
            os.chdir("".join(command[1:]))
    except FileNotFoundError:
        print("no such directory: %s"   %(command[1]))
    except NotADirectoryError:
        print("%s is not a directory" % command[1])
        
def run_command(command):
    """
        takes a command as a list of strings and exercutes it
    """
    
    if "exit" in command:
        exit_func()
    if command[0] == "cd":
       change_directory(command)
    elif command[0] == "majel_timeout" and len(command) == 2:
       global timeout
       timeout= int(command[1])
       print("set timeout to ",timeout)
    elif command[0] == "majel_pronouce" and len(command) == 2:
        show_pronouciation(command[1])
    elif command[0] == "majel_alias" and len(command) == 3:
        add_alias(command[1],command[2])
    elif command[0] == "majel_update" and len(command) == 1:
        if is_connected("google.com"):
            setup.update_all()
        else:
            print("not connected!")
    else:
        try:
            command = replace_alias(command)
            # command_exec = [command[0], "".join(command[1:])]
            # print(command_exec)
            # subprocess.run(command_exec)

            if "sudo" in command or "rm" in command or "mv" in command or "cp" in command:
                p = input(
                    "are you sure you want to run the command: '%s'? (Y/N)─‣ " % " ".join(command))
                if p in ["y","yes","Y","aye aye","sure","ok"]:
                    subprocess.run(command)
            else:
                subprocess.run(command)
        except FileNotFoundError:
            print("Invalid Command: %s"%" ".join(command))
        except PermissionError:
            print("User %s does not have permission to do that" % getpass.getuser())

def replace_in_list(phrase,to_replace,replaced):
    phrase = [s.replace(to_replace,replaced) for s in phrase]
    return phrase


def add_alias(alias, command):
    with open("/home/g/year3/majel/alias.txt",'r') as f:
        lines = f.readlines()
        print(lines)
    a = list()
    for l in lines:
        a.append(l.split()[0])
    print(a)
    with open("/home/g/year3/majel/alias.txt", 'a') as f:
        if alias not in a:
            print("adding new alias %s for %s" % (alias, command))
            f.write("%s %s\n"%(alias,command))
        else:
            print("an alias with that name already exists")

def is_connected(hostname):
    #FROM https://stackoverflow.com/questions/20913411/test-if-an-internet-connection-is-present-in-python
    try:
        # see if we can resolve the host name -- tells us if there is
        # a DNS listening
        host = socket.gethostbyname(hostname)
        # connect to the host -- tells us if the host is actually
        # reachable
        s = socket.create_connection((host, 80), 2)
        s.close()
        return True
    except:
        pass
        return False



def replace_alias(command):
    alias_dict = dict()
    with open("/home/g/year3/majel/alias.txt","r") as f:
        lines = f.readlines()
    for l in lines:
        alias = l.split()[0]
        file_command = l.split()[1:]
        #print(alias,file_command)
        alias_dict[alias] = file_command
    
    #print(alias_dict)
    out_command = command.copy()
    for index,word in enumerate(command):
        #print(index,word)
        if word in alias_dict.keys():    
            #print("found match!")
            to_insert = alias_dict[word]
            #print(to_insert)
            out_command.pop(index)
            out_command[index:index] = to_insert
    #print("command is %s" % out_command)
    
    return out_command

def word_to_character(phrase, speech = True):
    """
    converts spoken input string to exercutable command
    """
   
    #print("phrase before replace step: ",phrase)
    phrase = replace_in_list(phrase,"dash","-")
    phrase = replace_in_list(phrase,"slash","/")
    phrase = replace_in_list(phrase,"dot",".")
    #print("phrase after replace step: ",phrase)
    for word in phrase:
        #print(word)
        if word == "<s>":
            phrase.remove(word)
            """
    for n,i in enumerate(phrase):
        #print(n,i)
        
        
        if i == "/" and n < len(phrase)-1:
            #print("phrase[n+1] is ",phrase[n+1])
            phrase[n+1] =  "/" + phrase[n+1]
            phrase.pop(n)
    """
    prev_word = "test"
    
    #print("\n-------")
    #print(phrase)
    
    count = 0
    while count < len(phrase):
        for index,word in enumerate(phrase):
            #print(index,word)
           
            if word == "upper":
                phrase[index+1] = phrase[index+1].upper()
                phrase.pop(index)
            if word == "lower":
                phrase[index+1] = phrase[index+1].lower()
                phrase.pop(index)
            if word == "-":
                #print("dash found!")
                phrase[index+1] = "-" + phrase[index+1]
                phrase.pop(index)
            if word == "capital":
                phrase[index+1] = phrase[index+1].capitalize()
                phrase.pop(index)
            if word == "-capital":
                phrase[index+1] = "-" + phrase[index+1].capitalize()
                phrase.pop(index)
            
            if word == "execute":
                phrase[index+1] = "./" + phrase[index+1]
                phrase.pop(index)
            if  word == "." and index < len(phrase)-1:
                if phrase[index+1] == ".":
                    phrase.pop(index+1)


                    phrase[index] = ".." + phrase[index+1]
                    phrase.pop(index+1)
                    #print("dot dot found!")
                else:
                    phrase[index] = phrase[index-1] + "." + phrase[index+1]
                    phrase.pop(index-1)
                    phrase.pop(index)
            #print("word is ", word, "at index", index)
            #print("prev_word is", prev_word)
            if prev_word[0]== "/" and word[0] == "/":
                new_word = prev_word + word
                #print("new word is ",new_word)
                phrase[index] = new_word
                phrase.pop(prev_index)
                prev_word = new_word
            else:
                prev_word = word
                prev_index = index
        #print(phrase)
        count+= 1
    #phrase = replace_in_list(phrase,"root","/")
    phrase = replace_in_list(phrase,"~","/home/g")
    #print(phrase)
    #print(len(phrase))
    if phrase[-1] == "/":
        phrase.pop(-1)
    update_log(" ".join(phrase))

    if speech:
        print("You said: %s" % " ".join(phrase))
    return phrase


def update_log(phrase):
    """
    updates the log file with the most recent command.
    """
    with open('/home/g/year3/majel/majel_log.txt','a') as f:
        f.write(phrase+"\n")


def more_than_one_ending_slash(phrase):
    flag = 0
    for words in phrase:
        if words[0] is "/":
            flag +=1
    if flag > 1:
        return True
    else:
        return False


def get_quote():
    """
    returns as a string a random quote from the list.
    """
    boot_quotes = [
        "you can't lay a patch by computer design,\nIt's just a lot of stupid,stupid signs",
        "Its amazing what devices you can sympathize.",
        "I talk to the wind,\nmy words are all carried away.",
        "Is there anybody out there?",
        "Computer, what is the nature of the universe?\nThe universe is a spheroid region, 705 meters in diameter.",
        "There are problems in this universe for which there are no answers.\nNothing. Nothing can be done.",
        "Show me a completely smooth operation and I'll show you someone who's covering mistakes.\nReal boats rock.",
        "Ultimately all things are known because you want to believe you know.",
        "There's no secret to balance. You just have to feel the waves.",
        "It is difficult to live in the present, pointless to live in the future and impossible to live in the past."
        ]
    return textwrap.fill(random.choice(boot_quotes),width = 80)


def exit_func():
    print("Goodbye!")
    time.sleep(0.7)
    os.system('clear')
    exit()


@contextmanager
def suppress_stdout():
    with open(os.devnull, "w") as devnull:
        old_stdout = sys.stdout
        sys.stdout = devnull
        try:
            yield
        finally:
            sys.stdout = old_stdout


@contextmanager
def suppress_stderr():
    with open(os.devnull, "w") as devnull:
        old_stderr = sys.stderr
        sys.stderr = devnull
        try:
            yield
        finally:
            sys.stderr = old_stderr

def is_repo(path):
    """
    takes a file path a returns True if it is a git repo,
    False otherwise
    """
    if subprocess.call(["git", "branch"], stderr=subprocess.STDOUT, stdout=open(os.devnull, 'w')) != 0:
        return False
    else:
        return True


def show_pronouciation(word):
    with open("/home/g/year3/majel/languages/cmd2/master.dict") as f:
        master_dictionary = f.readlines()
    found = False
    for line in master_dictionary:
        #print(lines)
        if word.upper() in line:
            print(line)
            found = True
    if not found:
        print("%s is not in the dictionary."% word)
#SETUP START-----------------------------
#signal.signal(signal.SIGINT, signal.SIG_IGN)
#signal.signal(signal.SIGTSTP, signal.SIG_IGN)
ERROR_HANDLER_FUNC = CFUNCTYPE(
    None, c_char_p, c_int, c_char_p, c_int, c_char_p)


def py_error_handler(filename, line, function, err, fmt):
  pass


c_error_handler = ERROR_HANDLER_FUNC(py_error_handler)

asound = cdll.LoadLibrary('libasound.so')
# Set error handler
asound.snd_lib_error_set_handler(c_error_handler)
# Initialize PyAudio
p = pyaudio.PyAudio()
p.terminate()
timeout = 2  # default timeout for speech
selective_mode = False # experimental 
if (len(sys.argv) == 2 and sys.argv[1] == "setup") or not os.path.exists("/home/g/year3/majel/grammars/progs.gram"):
    print("running setup....")
    if is_connected("google.com"):
        if os.path.exists("/home/g/year3/majel/grammars/command.fsg"):
            os.remove("/home/g/year3/majel/grammars/command.fsg")
        setup.setup_dict_grammar()
        test_recognition()
        os.system('clear')

    else:
        print("could not run setup! Check internet connection.")
#SETUP END -----------------------------

if __name__ == "__main__":
    #language setup - could be changed later
    l = ("/home/g/year3/majel/languages/acoustic-model","/home/g/year3/majel/languages/cmd1.lm","/home/g/year3/majel/languages/cmd2/master.dict")
    gram = "/home/g/year3/majel/grammars/command.gram"
    #display setup
    command_words = str()
    username = getpass.getuser()
    hostname = socket.gethostname()
    
    #welcome message
    print("Welcome to Majel!\n" + "\x1b[3;39;40m" + get_quote() + "\x1b[0m")
    #prompt start
    while True:
        if is_repo(os.getcwd()):
           git_string = "|\x1b[1;41;40m" + "G" + "\x1b[0m"
        else:
            git_string = ""
        current_time = "\x1b[1;31;42m[" + datetime.now().strftime("%H:%M:%S") + "]\x1b[0m"
        path =  "\x1b[3;32;40m" + username + "@" +hostname +\
                " in \x1b[0m" + "\x1b[4;32;40m" + os.getcwd() +\
                "\x1b[0m" + git_string
        path = path.replace("/home/%s"%username,"~")

        prompt =  "\n╭─|%s|%s|(Press Enter ⮠ for speech input)|\n╰─‣ " % (current_time,path)
        input_string= input(prompt)
        command_words = shlex.split(input_string)
        s = False
        if command_words == []:# use voice
            s = True
            command_words  = get_command(l,gram,selective_mode)
        #print(command_words)
    
        if len(command_words) != 0 and command_words != [""]: # if some words were returned - the recogniser was successful
            command_words = word_to_character(command_words, s)
            run_command(command_words)
        else:
            print("I'm sorry %s, I'm afraid I can't do that." % username.capitalize())
    exit_func()
